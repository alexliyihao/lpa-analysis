"""A generator computing appearance absolute frequency of SNP carrier by race and ethnicity

Common usage:

Given the following:

* A ``freq_table_generator.FreqTableGenerator`` instance ``ftg``
* ``ftg_freq_table_ethnicity_gender`` generated by ``ftg`` counting the frequency for `"Ethnicity_Gender"` e.g. "EU_Male"

Count that for each ethnicity and rarity ("Common", "Rare"),
the number of variants' appearance across gender:

    Initialize::

        ftg = freq_table_generator.FreqTableGenerator()
        atg = appearance_table_generator.AppearanceTableGenerator(freq_table_generator = ftg)

    Generate the table::

        ftg_freq_table_ethnicity_gender = ftg.generate_freq_table_with_rarity(
            class_info_table = personal_info_with_ethnicity[["Ethnicity_Gender"]],
            one_hot_table = encoded_result,
            class_variable = "Ethnicity_Gender")
        atg.generate_appearance_table(ftg_freq_table_ethnicity_gender)

"""

from typing import List, Tuple
import pandas as pd


class AppearanceTableGenerator:
    """
    Tidying the output from freq_table_generator.FreqTableGenerator when working
    with "gender in ethnicity" problem

    Initialization:

        atg = AppearanceTableGenerator(
            freq_table_generator: lpa.pipeline.freq_table_generator.FreqTableGenerator,
            ethnicity_list: List[str],
            rarity_list: List[str])

    Args:
        freq_table_generator: lpa.pipeline.freq_table_generator.FreqTableGenerator,
            the freq_table_generator used for upstream data
        ethnicity_list: list of string, the name of ethnicity used,
            ["AF", "HISP", "EU"] by default
        rarity_list: list of string, the name of rarity used,
            ["Common", "Rare"] by default
    """
    def __init__(
        self,
        freq_table_generator,
        ethnicity_list: List[str] = ["AF", "HISP", "EU"],
        rarity_list: List[str] = ["Common", "Rare"],
    ) -> None:
        self.ethnicity_list = ethnicity_list
        self.rarity_list = rarity_list
        self.ftg = freq_table_generator

    def generate_appearance_table(
            self,
            df: pd.DataFrame
            #mode: str = "Ethnicity_Gender"
    ) -> pd.DataFrame:
        """The API for the pipeline

        Args:
            df: pd.DataFrame, the output from self.ftg when the class_variable is
                "<Ethnicity>_<Gender>" format, e.g."AF_Male"

        Returns:
            pd.DataFrame: the frequency table generated
        """
        #if mode == "Ethnicity_Gender":
        return self.generate_appearance_table_ethnicity_gender(df)
        # the rest are not added to the visualization part so they are not implemented
        #else:
        #    return self.generate_appearance_table_single_class(df)


    def generate_appearance_table_ethnicity_gender(self, df: pd.DataFrame) -> pd.DataFrame:
        df = self.generate_ethnicity_rarity_info(df = df)
        # count the number included
        df_appearance_check = pd.DataFrame([
            self._subclass_appearance_check_ethnicity_gender(
                class_string = ethnicity,
                rarity = rarity,
                freq_table = df)
            for ethnicity in self.ethnicity_list
            for rarity in self.rarity_list],
            columns = [
            "Ethnicity", "Rarity", "sub_class",
            "Male_appeared_in_sub_class",
            "Female_appeared_in_sub_class",
            "Both_appeared_in_sub_class"
        ])
        return df_appearance_check

    def generate_ethnicity_rarity_info(self, df: pd.DataFrame)-> pd.DataFrame:
        # generate freq count for each ethnicity
        for ethnicity in self.ethnicity_list:
            df.loc[:, f"count_{ethnicity}"] = df[f"count_{ethnicity}_Male"] + df[f"count_{ethnicity}_Female"]
            df.loc[:, f"total_{ethnicity}_detected"] = df[f"total_{ethnicity}_Female_detected"] + df[f"total_{ethnicity}_Male_detected"]
            df.loc[:, f"freq_{ethnicity}"] = df[f"count_{ethnicity}"]/df[f"total_{ethnicity}_detected"]
            df.loc[:, f"total_{ethnicity}_population"] = df[f"total_{ethnicity}_Female_population"]+df[f"total_{ethnicity}_Male_population"]
        # generate overall freq info
        df.loc[:, "count_total_population"] = df[[f"count_{ethnicity}" for ethnicity in self.ethnicity_list]].sum(axis = 1)
        df.loc[:, "total_total_population_detected"] = df[[f"total_{ethnicity}_detected" for ethnicity in self.ethnicity_list]].sum(axis = 1)
        df.loc[:, "total_total_population_population"] = df[[f"total_{ethnicity}_population" for ethnicity in self.ethnicity_list]].sum(axis = 1)
        df.loc[:, "freq_total_population"] = df["count_total_population"]/df["total_total_population_detected"]
        # for Figure 2, prepare rarity information for each ethnicity
        df = self.ftg.common_check(df, class_variable_list = self.ethnicity_list + ["total_population"])
        return df

    def _subclass_appearance_check_ethnicity_gender(
            self,
            class_string: str,
            rarity: str,
            freq_table: pd.DataFrame) -> Tuple[str, str, int, int, int, int]:
        sub_class = freq_table.loc[
            freq_table[class_string] == rarity]
        male_appearance = sub_class.loc[
            freq_table[f"{class_string}_Male"] != "Not Detected"].index
        female_appearance = sub_class.loc[
            freq_table[f"{class_string}_Female"] != "Not Detected"].index
        return (class_string,
                rarity,
                len(sub_class.index),
                len(male_appearance),
                len(female_appearance),
                len(male_appearance.intersection(female_appearance)))
