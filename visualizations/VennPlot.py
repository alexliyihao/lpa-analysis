import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib_venn import venn3, venn3_circles
import os
import seaborn as sns

class VennPlot():

    def __init__(self, output_path = None, ethnicities = ["eu", "af", "hisp"]):
        self._ethnicities = ethnicities
        self.output_path = output_path

    def _check_exist(self, snp_table):
        """for a snp table, return indicator of existance(non-zero) for all the mutations"""
        # for each non "ethnicity" column, return if there's any non zero, return 1
        # other wise 0
        return pd.DataFrame([(col,int(snp_table[col].sum()!=0))
                            for col in snp_table.columns if col != "ethnicity"])

    def _flatten(self, group_df):
        """combine the existance indicator to one line"""
        # pick the column 1 (indicators), flatten it to a row, clean the index
        group_df = group_df[[1]].T.reset_index().drop(columns = "index")
        # give a column title for 1(eu),2(af),3(hisp)
        group_df.columns = np.arange(1,4)
        # return the row
        return group_df

    def get_venn_dataframe(self, snp_table):
        """for any snp table get the venn table

        Args:
            snp_table: pd.DataFrame, the integer encoded snp_table
        Return:
            pd.DataFrame, pd.DataFrame, a boolean table
                        whose row stands for different pos-ref/alts, columns stands
                        for different ethnicities, the value stands for if this snp
                        exists in this ethnicity. This table is for R Users generating
                        Venn Diagram from their APIs
        """
        # generate a encoded snp table with ethnicity column
        df = pd.concat([snp,ethnicity_from_pca], axis = 1, join = "inner")
        # split the table by ethnicity
        dfg_test = df.groupby("ethnicity")
        # for each ethnicity, check each mutation if they exist
        df = dfg_test.apply(self._check_exist)
        # reset the index and use column 0
        # (pos-ref/alt column, name 0 is generated by group-apply)
        df = df.reset_index().groupby(0)
        # for each pos-ref/alt, combine the existance indicator to one line
        df = df.apply(self._flatten)
        # tidy the redundant indexes
        df = df.reset_index().drop(columns = "level_1")
        # rename the column names
        rename_col_names = dict(enumerate(self._ethnicities, start = 1))
        rename_col_names[0] = "SNP_POS"
        return df.rename(columns = col_names)

    def venn_diagram_from_table(self, venn_table):
        """draw venn diagram from venn_table

        Args:
            venn_table: pd.DataFrame, a boolean table whose row stands for
                        different pos-ref/alts, columns stands for different
                        ethnicities, the value indicates if this snp exists
                        in this ethnicity. This table is for R Users generating
                        Venn Diagram from their APIs
        """
        # snp_dict is {ethnicity_1: [...], ethnicity_2: [...],...}
        # the list is the SNP_POS that existed in this ethnicity in this venn table
        snp_dict = {ethnicity:[venn_table.loc[i,"SNP_POS"]
                               for i in np.arange(venn_table.shape[0])
                               if venn_table.loc[i,ethnicity] != 0]
                    for ethnicity in self._ethnicities}
        # call venn3, which requires a list of set as the first argument
        venn3([set(snp_dict[i]) for i in snp_dict.keys()], snp_dict.keys())

    def venn_from_snp(self, snp_table,output_label = "Venn", output_path = None):
        """generate a venn diagram and a boolean table from snp_table

        Args:
            snp_table: pd.DataFrame, the integer encoded snp_table
            output_path: Optional[str], the folder path saving output, it will
                         cover the output_path setting before if provide JUST FOR
                         THIS RUN
            output_label: Optional[str], the name of output files, the boolean
                          table will be named "{output_label}_table.csv", and the
                          Venn diagram will be named  "{output_label}_diagram.png"
        Raise:
            ValueError("No output path is provided"): if the instance has no output
                path setting neither when Initializing nor when calling this method
        Saves:
            venn_table: pd.DataFrame, saving at output_path/{output_label}_table.csv
                        a boolean table whose row stands for
                        different pos-ref/alts, columns stands for different
                        ethnicities, the value indicates if this snp exists
                        in this ethnicity. This table is for R Users generating
                        Venn Diagram from their APIs
            venn_diagram: np.ndarray, saving at output_path/{output_label}_diagram.png
        """
        if output_path is None:
            output_path = self.output_path
        if output_path is None:
            raise ValueError("No output path is provided")
        # create the folder for saving if not exist
        os.makedirs(output_path, exist_ok = True)
        # generate and save table
        output_table_path = os.path.join(output_path, f"{output_label}_table.csv")
        venn_table = self.get_venn_dataframe(snp_table)
        venn_table.to_csv(output_table_path)
        print(f"{label} binary table saved at {output_table_path}")
        # generate and save diagram
        fig = plt.figure()
        self.venn_diagram_from_table(venn_table)
        output_diagram_path = os.path.join(output_path f"{output_label}_diagram.png")
        fig.savefig(output_diagram_path)
        print(f"{label} Venn Diagram saved at {output_diagram_path}")
        plt.close()
