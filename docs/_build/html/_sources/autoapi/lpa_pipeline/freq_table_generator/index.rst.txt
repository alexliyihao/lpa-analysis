:py:mod:`lpa_pipeline.freq_table_generator`
===========================================

.. py:module:: lpa_pipeline.freq_table_generator

.. autoapi-nested-parse::

   A generator computing relative frequency of SNP carrier by group

   Common usage:

   Given two pandas.DataFrame

   * ``class_info_table`` has one have columns ``class_variable`` indicate the group
   * ``one_hot_table`` has all one-hot-variables(SNPs encoding),

   Compute the SNPs frequency in each class defined in <class_variable>:

       Initialize::

           ftg = freq_table_generator.FreqTableGenerator(
               threshold = 0.01
               encoding = {0: "Not Detected",
                           1: "Rare",
                           2: "Common"})

       Generate the table::

           freq_table = ftg.generate_freq_table(
               class_info_table = class_info_table,
               one_hot_table = one_hot_table,
               class_variable = "<class_variable>"
               class_variable_list = ["<class_name_1>","<class_name_2>",...]
               #if only need a part of <class_variable> column
               )

       If you need a rarity classification as columns as well::

           freq_table_with_rarity = ftg.generate_freq_table_with_rarity(
               class_info_table = class_info_table,
               one_hot_table = one_hot_table,
               class_variable = "<class_variable>"
               class_variable_list = ["<class_name_1>","<class_name_2>",...]
               #if only need a part of <class_variable> column
               )

   Where threshold and encoding are for generating rarity:

   * if the threshold < freq < 1- threshold, it will be encoded as 2
   * if the 0 < freq < threshold or 1 - threshold < freq < 1, it will be encoded as 1
   * if freq = 0 or freq = 1, it will be 0.

   Thus, for encoding, please only modify the value, not the key.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   lpa_pipeline.freq_table_generator.FreqTableGenerator




Attributes
~~~~~~~~~~

.. autoapisummary::

   lpa_pipeline.freq_table_generator.parser


.. py:class:: FreqTableGenerator(threshold: float = 0.01, class_lower_case: bool = False, encoding: Dict[int, str] = {0: 'Not Detected', 1: 'Rare', 2: 'Common'})


   a generator class with API generate frequency table on all-one-hot variables,
   along with rarity check, originally designed for genome analysis

   Initialization:

       ftg = FreqTableGenerator(threshold: float,
           class_lower_case: bool,
           encoding: dict)

   :param threshold: float, the threshold for rare vs. common for SNPs, default 0.01
   :param class_lower_case: bool, if True, all the class name will be in lower case
                            for formatting
   :param encoding: dict{int: "str"}, the encoding for rarity, the keys should be
                    kept as 0,1,2. 0 stands for there's no founding, 2 stands for the
                    frequency is between threshold to 1-threshold

   .. py:method:: generate_freq_table(class_info_table: pandas.DataFrame, one_hot_table: pandas.DataFrame, class_variable: str, class_variable_list: Optional[List[str]] = None, return_class_variable_list: bool = False) -> Tuple[pandas.DataFrame, List[str]]

      Generate the whole freq table for all class

      :param class_info_table: pd.DataFrame, the table with class_variable
      :param one_hot_table: pd.DataFrame, the table with all the one-hot-encoded data
      :param class_variable: str, the name of column indicating the group setting
      :param class_variable_list: Optional[list[str]], if provided, only mentioned
                                  groups in class_variable will be listed
      :param return_class_variable_list: bool, if True, will return the
                                         class_variable_list use, even if not provided as variable

      :returns: the frequency table generated
                list[str]: the list of group name included if return_class_variable_list == True
      :rtype: pd.DataFrame


   .. py:method:: get_freq(class_string: str, class_wise_group: pandas.core.groupby.DataFrameGroupBy, one_hot_table: pandas.DataFrame) -> pandas.DataFrame

      Compute the freq for each class


   .. py:method:: common_check(freq_table: pandas.DataFrame, class_variable_list: List[str], threshold: Optional[float] = None, class_lower_case: Optional[bool] = None, encoding: Optional[Dict[int, str]] = None) -> pandas.DataFrame

      Append the commonness check to a frequency table

      :param freq_table: pd.DataFrame, the frequency table provided
      :param class_variable_list: list[str], the list of group name included
      :param threshold: float, will cover the class setting if provided
      :param class_lower_case: bool, will cover the class setting if provided
      :param encoding: dict{int: "str"}, will cover the class setting if provided

      :returns: pd.DataFrame, the freq_table with rarity columns


   .. py:method:: generate_freq_table_with_rarity(class_info_table: pandas.DataFrame, one_hot_table: pandas.DataFrame, class_variable: str, class_variable_list: Optional[List[str]] = None, threshold: float = None, class_lower_case: bool = None, encoding: Dict[int, str] = None)

      Generate the whole freq table for all class

      :param class_info_table: pd.DataFrame, the table with class_variable
      :param one_hot_table: pd.DataFrame, the table with all the one-hot-encoded data
      :param class_variable: str, the name of column indicating the group setting
      :param class_variable_list: Optional[list[str]], if provided, only mentioned
                                  groups in class_variable will be listed
      :param threshold: float, will cover the class setting if provided
      :param class_lower_case: bool, will cover the class setting if provided
      :param encoding: dict{int: "str"}, will cover the class setting if provided

      :returns: the frequency table with rarity indicators
      :rtype: pd.DataFrame



.. py:data:: parser

   

