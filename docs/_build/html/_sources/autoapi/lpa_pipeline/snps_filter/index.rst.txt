:py:mod:`lpa_pipeline.snps_filter`
==================================

.. py:module:: lpa_pipeline.snps_filter

.. autoapi-nested-parse::

   Give a first-step filter to all the SNPs encoded from Coassin's output

   Apply the following:

       * filter A: drop SNPs with NA ratio higher than ``drop_ratio`` in population
       * filter B: drop SNPs with all 1's or all 0's (NA doesn't count for this)

   Example::

       filter_AB = SnpsFilter(drop_ratio = 0.1)
       filtered_result, drop_mask, drop_report = filter_AB.filter_a_and_b(df)

   Where df is a pd.DataFrame instance,
   with SNPs ID on the header, subject ID at the index,
   i.e. This filter is dropping columns.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   lpa_pipeline.snps_filter.SnpsFilter




Attributes
~~~~~~~~~~

.. autoapisummary::

   lpa_pipeline.snps_filter.parser


.. py:class:: SnpsFilter(drop_ratio: float = 0.1)


   apply filter A and B to a one-hot SNPs table

   Initialize:
       filter_AB = SnpsFilter(drop_ratio: float)

   Running:
       filtered_result, drop_mask, drop_report = filter_AB.filter_a_and_b(df)

   .. py:method:: filter_a(df: pandas.DataFrame, drop_ratio: Optional[float] = None) -> pandas.DataFrame

      give filter_A's result: drop variants with >drop_ratio NA in population


   .. py:method:: filter_b(df: pandas.DataFrame) -> pandas.DataFrame

      add a filtered_B indicator on filter A result

      The value of filter B is based on unique number of non-NA values in each specific position


   .. py:method:: drop_report(df: pandas.DataFrame, drop_ratio: Optional[float] = None) -> Tuple[pandas.DataFrame, pandas.DataFrame]

      Generate a drop report about filter A and B

      :param df: pd.DataFrame, the table to be filtered
      :param drop_ratio: float, if provided, will cover the default in class initiation

      :returns: the dropping boolean mask of df
                pd.DataFrame: the report for numbers of dropping
      :rtype: pd.DataFrame


   .. py:method:: filter_a_and_b(df: pandas.DataFrame, drop_ratio=None) -> Tuple[pandas.DataFrame, pandas.DataFrame, pandas.DataFrame]

      API run filter A and B and generate the result in one line

      :param df: pd.DataFrame, the table to be filtered
      :param drop_ratio: float, if provided, will cover the default in class initiation

      :returns: the table of SNPs passed the dropping
                pd.DataFrame: the dropping boolean mask of df
                pd.DataFrame: the report for numbers of dropping
      :rtype: pd.DataFrame



.. py:data:: parser

   

