:py:mod:`lpa_pipeline.appearance_table_generator`
=================================================

.. py:module:: lpa_pipeline.appearance_table_generator

.. autoapi-nested-parse::

   A generator computing appearance absoulute frequency of SNP carrier by race and ethnicity

   Common usage:

   Given the following:

   * A ``freq_table_generator.FreqTableGenerator`` instance ``ftg``
   * ``ftg_freq_table_ethnicity_gender`` generated by ``ftg`` counting the frequency for `"Ethnicity_Gender"` e.g. "EU_Male"

   Count that for each ethnicity and rarity ("Common", "Rare"),
   the number of variants' appearance across gender:

       Initialize::

           ftg = freq_table_generator.FreqTableGenerator()
           atg = appearance_table_generator.AppearanceTableGenerator(freq_table_generator = ftg)

       Generate the table::

           ftg_freq_table_ethnicity_gender = ftg.generate_freq_table_with_rarity(
               class_info_table = personal_info_with_ethnicity[["Ethnicity_Gender"]],
               one_hot_table = encoded_result,
               class_variable = "Ethnicity_Gender")
           atg.generate_appearance_table(ftg_freq_table_ethnicity_gender)



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   lpa_pipeline.appearance_table_generator.AppearanceTableGenerator




.. py:class:: AppearanceTableGenerator(freq_table_generator, ethnicity_list: List[str] = ['AF', 'HISP', 'EU'], rarity_list: List[str] = ['Common', 'Rare'])


   Tidying the output from freq_table_generator.FreqTableGenerator when working
   with "gender in ethnicity" problem

   Initialization:

       atg = AppearanceTableGenerator(
           freq_table_generator: lpa.pipeline.freq_table_generator.FreqTableGenerator,
           ethnicity_list: List[str],
           rarity_list: List[str])

   :param freq_table_generator: lpa.pipeline.freq_table_generator.FreqTableGenerator,
                                the freq_table_generator used for upstream data
   :param ethnicity_list: list of string, the name of ethnicity used,
                          ["AF", "HISP", "EU"] by default
   :param rarity_list: list of string, the name of rarity used,
                       ["Common", "Rare"] by default

   .. py:method:: generate_appearance_table(df: pandas.DataFrame) -> pandas.DataFrame

      The API for the pipeline

      :param df: pd.DataFrame, the output from self.ftg when the class_variable is
                 "<Ethnicity>_<Gender>" format, e.g."AF_Male"

      :returns: the frequency table generated
      :rtype: pd.DataFrame


   .. py:method:: generate_appearance_table_ethnicity_gender(df: pandas.DataFrame) -> pandas.DataFrame


   .. py:method:: generate_ethnicity_rarity_info(df: pandas.DataFrame) -> pandas.DataFrame


   .. py:method:: _subclass_appearance_check_ethnicity_gender(class_string: str, rarity: str, freq_table: pandas.DataFrame) -> Tuple[str, str, int, int, int, int]



